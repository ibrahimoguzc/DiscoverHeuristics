"""
Find the mathematical heuristic function for the single machine scheduling problem that returns indices of assigned jobs, given data on processing times, due dates of jobs. 
Note that each job is assigned to the machine exactly once (i.e., no job is left unassigned or have multiple assignment). 
Note that the due dates and the processing times should not be manipulated.
"""



import numpy as np
@funsearch.run
def evaluate(data):
    tardiness_list = []
    none_penalty = 100000
    for i in range(len(data)):
        processing_times = data[i]['processing_times'].copy()
        due_dates = data[i]['due_dates'].copy()
        processing_times.flags.writeable = False
        due_dates.flags.writeable = False
        n_jobs = len(due_dates)
        
        assigned_indices = assignment(processing_times, due_dates)
        if assigned_indices.size != n_jobs:
            tardiness = none_penalty
        elif sum(data[i]['processing_times'])<=0:
            tardiness = none_penalty  
        elif len(set(assigned_indices)) != n_jobs:
            tardiness = none_penalty
        elif not(np.array_equal(data[i]['processing_times'], processing_times) or np.array_equal(data[i]['due_dates'])):
            tardiness = none_penalty
        else:
            processing_times = processing_times[assigned_indices]
            due_dates = due_dates[assigned_indices]
            completion_times = np.cumsum(processing_times)
            #finding completion times for each job
            tardiness = np.sum(np.maximum(0, (completion_times - due_dates)))

        
        tardiness_list.append(tardiness)

    score = np.mean([x for x in tardiness_list if x is not None])

    if np.isnan(score) or np.isinf(score):
        return None
    else:
        return -score

@funsearch.evolve
def assignment(processing_times: np.ndarray, due_dates: np.ndarray) -> np.ndarray:
    """ Find mathematical heuristic function skeleton for the single machine scheduling problem. Each job is assigned to the machine exactly once. Do not change the original due dates and processing times of jobs.

    Args:
        processing_times: A numpy array representing processing times of jobs.
        due_dates: A numpy array representing due dates of jobs.

    Return:
        A numpy array representing indices of jobs assigned in order as the result of applying the mathematical function to the inputs.
    """
    assigned_jobs = np.argsort(processing_times)

    return assigned_jobs
